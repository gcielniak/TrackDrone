#include "Image.h"



Image::Image(){

	//sdlSurfaceFrontImage = SDL_CreateRGBSurface(SDL_HWSURFACE, 320, 240, 32, 0, 0, 0, 0);
	iplFrontImage = cvCreateImage( cvSize(320, 240 ), IPL_DEPTH_8U, 3 );

	//sdlSurfaceBottomImage = SDL_CreateRGBSurface(SDL_HWSURFACE, 176, 144, 32, 0, 0, 0, 0);
	iplBottomImage = cvCreateImage( cvSize(176, 144 ), IPL_DEPTH_8U, 3 );
}


void Image::matriceToIplImage(int type){

	CvScalar pixel;
	int i, j;
	if(type==FRONTCAMERA)
		for( i = 0 ; i < 320 ; i++ )
			for( j = 0 ; j < 240 ; j++ ){
				pixel = cvScalar(matriceFrontImage[j][i].b,matriceFrontImage[j][i].g,matriceFrontImage[j][i].r,0); //BGR
				cvSet2D(iplFrontImage,j,i,pixel);
			}

	if(type==BOTTOMCAMERA)
		for( i = 0 ; i < 176 ; i++ )
			for( j = 0 ; j < 144 ; j++ ){
				pixel = cvScalar(matriceBottomImage[j][i].b
						,matriceBottomImage[j][i].g
						,matriceBottomImage[j][i].r
						,0); //BGR
				cvSet2D(iplBottomImage,j,i,pixel);
			}
}


void Image::saveImage(const char* filename,int type,bool color){

	if(color){
		if(type==FRONTCAMERA)
			cvSaveImage(filename,iplFrontImage);
		if(type==BOTTOMCAMERA)
			cvSaveImage(filename,iplBottomImage);
	}else{
		if(type==FRONTCAMERA){
			IplImage* frameGray = cvCreateImage( cvSize(320, 240 ), IPL_DEPTH_8U, 1 );
			cvCvtColor(iplFrontImage,frameGray,CV_RGB2GRAY);
			cvSaveImage(filename,frameGray);
		}
		if(type==BOTTOMCAMERA){
			IplImage* frameGray = cvCreateImage( cvSize(176, 144 ), IPL_DEPTH_8U, 1 );
			cvCvtColor(iplBottomImage,frameGray,CV_RGB2GRAY);
			cvSaveImage(filename,frameGray);
		}
	}

}


void Image::setMatriceImage(Matrice_rgb mat[240][320],int type){

int i,j;	

	if(type==FRONTCAMERA)
		for( i = 0 ; i < 320 ; i++ )
			for( j = 0 ; j < 240 ; j++ )
				matriceFrontImage[j][i] = mat[j][i];
	if(type==BOTTOMCAMERA)
		for( i = 72 ; i < 248 ; i++ )
			for( j = 48 ; j < 192 ; j++ )
				matriceBottomImage[j-48][i-72] = mat[j][i];

}

/*void Image::setMatriceImage(int pixel,int y,int x){

	matriceImage[y][x] = pixel;

}*/

IplImage* Image::getIplImage(int type){
	if(type==FRONTCAMERA) return iplFrontImage;
	if(type==BOTTOMCAMERA) return iplBottomImage;
}

//SDL_Surface* Image::getSdlSurfaceImage(int type){
//	if(type==FRONTCAMERA) return sdlSurfaceFrontImage;
//	if(type==BOTTOMCAMERA) return sdlSurfaceBottomImage;
//}


