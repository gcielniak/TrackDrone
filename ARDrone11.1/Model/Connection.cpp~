#include "Connection.h"

Connection::Connection(int port)
{
	//printf("create object Connection\n");
	this->port = port;

	//printf("port num %d\n",port);

	//sock = initializationConnection(&addrDrone, 5555);
}

SOCKET Connection::createSocket(){
	
	sock = socket(AF_INET,SOCK_DGRAM,0);
	
	if( sock == -1 )
	{
		perror("Create Socket");
		exit(0);
	}

	return sock;

}

SOCKADDR_IN Connection::configureAddress(char* ip, int p){

	SOCKADDR_IN sin;

	//printf("passage1.1\n");

	sin.sin_addr.s_addr = inet_addr(ip);
	sin.sin_family = AF_INET;
	sin.sin_port = htons(p);

	//printf("passage1.2\n");

	return sin;
}

void Connection::bindSocket(){

	//printf("pavant de exit\n");

	if(bind(sock,(SOCKADDR*)&addrComputer,sizeof(addrComputer))==SOCKET_ERROR)
	{
		perror("Bind Socket");
		exit(0);
	}

	//printf("pas de exit\n");
}

void Connection::closeSocket(){

	if(closesocket(sock)==SOCKET_ERROR)
	{
		perror("Close Socket");
		exit(0);
	}
}

void Connection::sendMessage(char* message){

	int length = strlen(message);

	if( sendto(sock, message, length, 0, (SOCKADDR*) &addrDrone, sizeof(addrDrone)) != length )
	{
		perror("Error Send Message\n");
		exit(0);
	}
}

SOCKADDR_IN Connection::receiveMessage(void* message, int* sizeMessage, int sizeMaximum){

	int sizeMess;
	SOCKADDR_IN from;
	socklen_t lengthFrom;

	lengthFrom = sizeof(from);

	sizeMess = recvfrom(sock, message, sizeMaximum, 0, (SOCKADDR*) &from , &lengthFrom);

	if (sizeMess < 0)
	{
		perror("Error Receive Message\n");
		exit(0);
	}

	*sizeMessage = sizeMess;

	return from;
}

void Connection::wakeUpPort()
{
	int one = 1;

	if( sendto(sock, (char*)&one, sizeof(one), 0, (struct sockaddr*)&addrDrone, sizeof(addrDrone)) < 0 )
	{
		printf("Erreur lors du reveil du port distant\n");
		exit(0);
	}
}

void Connection::selectReceiveData(void* message, int* size, int sizeMaximum, int time_us)
{
	struct timeval tv;
	fd_set rfds;
    int ret;

    FD_ZERO(&rfds);
    FD_SET(sock, &rfds);

    tv.tv_sec = 0;
    tv.tv_usec = time_us;

    ret = select(sock+1, &rfds, NULL, NULL, &tv);

    if (ret == -1)
    *size = -1;

	else if(ret)
	receiveMessage(message, size, sizeMaximum);
	

	else
	*size = 0;
}

SOCKET Connection::initializationConnection()
{
	//printf("passage1\n");
	addrDrone = configureAddress(IP_DRONE,port);
	//printf("passage2\n");
	addrComputer = configureAddress(IP_COMPUTER, port + 50);
	//printf("passage3\n");
	sock = createSocket();
	//printf("passage4\n");
	bindSocket();
	//printf("passage5\n");

	return sock;
}


